@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridView";
        settings.CallbackRouteValues = new { Controller = "Shape", Action = "GridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Shape", Action = "GridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Shape", Action = "GridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Shape", Action = "GridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;

        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(column =>
        {
            column.FieldName = "Id";
            column.Caption = "ID";
            column.EditFormSettings.Visible = DevExpress.Utils.DefaultBoolean.False;
        });
        

        settings.Columns.Add(column =>
        {
            column.FieldName = "ShapeType";
            column.Caption = "Şekil";
            column.EditorProperties().ComboBox(p =>
            {
                p.DataSource = new string[] { "Kare", "Dikdortgen", "Daire", "Silindir", "Kup", "Kure" };
                p.ClientSideEvents.SelectedIndexChanged = "onShapeTypeChanged";
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Yukseklik";
            c.Caption = "Yukseklik";
            c.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "Yukseklik";
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Yaricap";
            c.Caption = "Yaricap";
            c.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "Yaricap";
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Kenar";
            c.Caption = "Kenar";
            c.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "Kenar";
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "KısaKenar";
            c.Caption = "Kısa Kenar";
            c.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "KısaKenar";
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "UzunKenar";
            c.Caption = "Uzun Kenar";
            c.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "UzunKenar";
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "HesaplandiMi";
            c.Caption = "Hesaplandı mı?";
            c.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "CreatedDate";
            c.Caption = "Hesaplanma Tarihi";
            c.EditFormSettings.Visible = DefaultBoolean.False;
        });


    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

<script>
    function onShapeTypeChanged(s, e) {
        var shapeType = s.GetValue();
        var kenar = ASPxClientTextBox.Cast("Kenar");
        var kisaKenar = ASPxClientTextBox.Cast("KısaKenar");
        var uzunKenar = ASPxClientTextBox.Cast("UzunKenar");
        var yukseklik = ASPxClientTextBox.Cast("Yukseklik");
        var yaricap = ASPxClientTextBox.Cast("Yaricap");


        kenar.SetValue("");
        kisaKenar.SetValue("");
        uzunKenar.SetValue("");
        yukseklik.SetValue("");
        yaricap.SetValue("");


        kenar.SetVisible(false);
        kisaKenar.SetVisible(false);
        uzunKenar.SetVisible(false);
        yukseklik.SetVisible(false);
        yaricap.SetVisible(false);


        switch (shapeType) {
            case "Kare":
                kenar.SetVisible(true);
                break;
            case "Dikdortgen":
                kisaKenar.SetVisible(true);
                uzunKenar.SetVisible(true);
                break;
            case "Daire":
                yaricap.SetVisible(true);
                break;
            case "Silindir":
                yaricap.SetVisible(true);
                yukseklik.SetVisible(true);
                break;
            case "Kup":
                kenar.SetVisible(true);
                break;
            case "Kure":
                yaricap.SetVisible(true);
                break;
        }
    }
</script>